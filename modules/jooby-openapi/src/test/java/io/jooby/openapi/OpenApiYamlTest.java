package io.jooby.openapi;

import examples.MinApp;
import io.jooby.internal.openapi.DebugOption;
import kt.KtMinApp;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class OpenApiYamlTest {

  @OpenApiTest(value = MinApp.class)
  public void shouldGenerateMinApp(OpenApiResult result) {
    assertEquals("openapi: 3.0.1\n"
        + "info:\n"
        + "  title: Min API\n"
        + "  description: Min API description\n"
        + "  version: \"1.0\"\n"
        + "paths:\n"
        + "  /api/pets:\n"
        + "    get:\n"
        + "      operationId: getApiPets\n"
        + "      parameters:\n"
        + "      - name: query\n"
        + "        in: query\n"
        + "        schema:\n"
        + "          $ref: '#/components/schemas/PetQuery'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                type: array\n"
        + "                items:\n"
        + "                  $ref: '#/components/schemas/Pet'\n"
        + "    put:\n"
        + "      operationId: updatePet\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    post:\n"
        + "      operationId: createPet\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    patch:\n"
        + "      operationId: updatePet2\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "  /api/pets/{id}:\n"
        + "    get:\n"
        + "      tags:\n"
        + "      - find\n"
        + "      - query\n"
        + "      summary: Find a pet by ID\n"
        + "      description: Find a pet by ID or throws a 404\n"
        + "      operationId: findPetById\n"
        + "      parameters:\n"
        + "      - name: id\n"
        + "        in: path\n"
        + "        description: Pet ID\n"
        + "        required: true\n"
        + "        schema:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    delete:\n"
        + "      operationId: deletePet\n"
        + "      parameters:\n"
        + "      - name: id\n"
        + "        in: path\n"
        + "        required: true\n"
        + "        schema:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "      responses:\n"
        + "        \"204\":\n"
        + "          description: No Content\n"
        + "components:\n"
        + "  schemas:\n"
        + "    Pet:\n"
        + "      type: object\n"
        + "      properties:\n"
        + "        id:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "        name:\n"
        + "          type: string\n"
        + "    PetQuery:\n"
        + "      type: object\n"
        + "      properties:\n"
        + "        id:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "        name:\n"
        + "          type: string\n"
        + "        start:\n"
        + "          type: integer\n"
        + "          format: int32\n"
        + "        max:\n"
        + "          type: integer\n"
        + "          format: int32\n", result.toYaml());
  }

  @OpenApiTest(KtMinApp.class)
  public void shouldGenerateKtMinApp(OpenApiResult result) {
    assertEquals("openapi: 3.0.1\n"
        + "info:\n"
        + "  title: Min API\n"
        + "  description: Min API description\n"
        + "  version: \"1.0\"\n"
        + "paths:\n"
        + "  /api/pets:\n"
        + "    get:\n"
        + "      operationId: getApiPets\n"
        + "      parameters:\n"
        + "      - name: query\n"
        + "        in: query\n"
        + "        schema:\n"
        + "          $ref: '#/components/schemas/PetQuery'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                type: array\n"
        + "                items:\n"
        + "                  $ref: '#/components/schemas/Pet'\n"
        + "    put:\n"
        + "      operationId: updatePet\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    post:\n"
        + "      operationId: createPet\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    patch:\n"
        + "      operationId: updatePet2\n"
        + "      requestBody:\n"
        + "        content:\n"
        + "          application/json:\n"
        + "            schema:\n"
        + "              $ref: '#/components/schemas/Pet'\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "  /api/pets/{id}:\n"
        + "    get:\n"
        + "      tags:\n"
        + "      - find\n"
        + "      - query\n"
        + "      summary: Find a pet by ID\n"
        + "      description: Find a pet by ID or throws a 404\n"
        + "      operationId: findPetById\n"
        + "      parameters:\n"
        + "      - name: id\n"
        + "        in: path\n"
        + "        description: Pet ID\n"
        + "        required: true\n"
        + "        schema:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "      responses:\n"
        + "        default:\n"
        + "          description: Success\n"
        + "          content:\n"
        + "            application/json:\n"
        + "              schema:\n"
        + "                $ref: '#/components/schemas/Pet'\n"
        + "    delete:\n"
        + "      operationId: deletePet\n"
        + "      parameters:\n"
        + "      - name: id\n"
        + "        in: path\n"
        + "        required: true\n"
        + "        schema:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "      responses:\n"
        + "        \"204\":\n"
        + "          description: No Content\n"
        + "components:\n"
        + "  schemas:\n"
        + "    Pet:\n"
        + "      type: object\n"
        + "      properties:\n"
        + "        id:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "        name:\n"
        + "          type: string\n"
        + "    PetQuery:\n"
        + "      type: object\n"
        + "      properties:\n"
        + "        id:\n"
        + "          type: integer\n"
        + "          format: int64\n"
        + "        name:\n"
        + "          type: string\n"
        + "        start:\n"
        + "          type: integer\n"
        + "          format: int32\n"
        + "        max:\n"
        + "          type: integer\n"
        + "          format: int32\n", result.toYaml());
  }
}
