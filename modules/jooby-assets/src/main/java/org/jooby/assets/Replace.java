package org.jooby.assets;

import com.typesafe.config.Config;
import org.jooby.MediaType;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * <h1>replace</h1>
 * <p>
 * Replace strings in files while bundling them.
 * </p>
 *
 * <h2>usage</h2>
 * <pre>
 * assets {
 *   fileset {
 *     home: ...
 *   }
 *
 *   pipeline {
 *     dist: [replace]
 *   }
 *
 *   replace {
 *     process.env.NODE_ENV: "\"production\""
 *     "\"development\"": "\"production\""
 *   }
 * }
 * </pre>
 *
 * @author edgar
 */
public class Replace extends AssetProcessor {

  @Override public boolean matches(MediaType type) {
    return true;
  }

  @Override public String process(String filename, String source, Config conf, ClassLoader loader)
      throws Exception {
    Map<String, String> options = new LinkedHashMap<>();
    StringBuilder keys = new StringBuilder();
    this.options.withoutPath("excludes").entrySet().forEach(e -> {
      String key = e.getKey()
          /** Replace \" generated by .conf format: */
          .replace("\\\"", "");
      if (Character.isJavaIdentifierStart(key.charAt(0))) {
        keys.append("(\\b").append(key).append("\\b)");
      } else {
        keys.append("(").append(key).append(")");
      }
      options.put(key, e.getValue().unwrapped().toString());
      keys.append("|");
    });
    if (keys.length() > 0) {
      keys.setLength(keys.length() - 1);
      Pattern pattern = Pattern.compile(keys.toString());
      StringBuffer sb = new StringBuffer();
      Matcher matcher = pattern.matcher(source);
      while (matcher.find()) {
        String key = matcher.group();
        String value = options.get(key);
        matcher.appendReplacement(sb, value);
      }
      matcher.appendTail(sb);
      return sb.toString();
    }
    return source;
  }
}
